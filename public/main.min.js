var app = (function (tinycolor) {
    'use strict';

    function noop() { }
    const identity = x => x;
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    let src_url_equal_anchor;
    function src_url_equal(element_src, url) {
        if (!src_url_equal_anchor) {
            src_url_equal_anchor = document.createElement('a');
        }
        src_url_equal_anchor.href = url;
        return element_src === src_url_equal_anchor.href;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function get_root_for_style(node) {
        if (!node)
            return document;
        const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
        if (root && root.host) {
            return root;
        }
        return node.ownerDocument;
    }
    function append_empty_stylesheet(node) {
        const style_element = element('style');
        append_stylesheet(get_root_for_style(node), style_element);
        return style_element.sheet;
    }
    function append_stylesheet(node, style) {
        append(node.head || node, style);
        return style.sheet;
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        if (node.parentNode) {
            node.parentNode.removeChild(node);
        }
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function stop_propagation(fn) {
        return function (event) {
            event.stopPropagation();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function to_number(value) {
        return value === '' ? null : +value;
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_data(text, data) {
        data = '' + data;
        if (text.data === data)
            return;
        text.data = data;
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, cancelable, detail);
        return e;
    }

    // we need to store the information for multiple documents because a Svelte application could also contain iframes
    // https://github.com/sveltejs/svelte/issues/3624
    const managed_styles = new Map();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_style_information(doc, node) {
        const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
        managed_styles.set(doc, info);
        return info;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash(rule)}_${uid}`;
        const doc = get_root_for_style(node);
        const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
        if (!rules[name]) {
            rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            managed_styles.forEach(info => {
                const { ownerNode } = info.stylesheet;
                // there is no ownerNode if it runs on jsdom.
                if (ownerNode)
                    detach(ownerNode);
            });
            managed_styles.clear();
        });
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    /**
     * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.
     * It must be called during the component's initialisation (but doesn't need to live *inside* the component;
     * it can be called from an external module).
     *
     * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).
     *
     * https://svelte.dev/docs#run-time-svelte-onmount
     */
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    /**
     * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).
     * Event dispatchers are functions that can take two arguments: `name` and `detail`.
     *
     * Component events created with `createEventDispatcher` create a
     * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).
     * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).
     * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)
     * property and can contain any type of data.
     *
     * https://svelte.dev/docs#run-time-svelte-createeventdispatcher
     */
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail, { cancelable = false } = {}) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail, { cancelable });
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
                return !event.defaultPrevented;
            }
            return true;
        };
    }

    const dirty_components = [];
    const binding_callbacks = [];
    let render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = /* @__PURE__ */ Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        // Do not reenter flush while dirty components are updated, as this can
        // result in an infinite loop. Instead, let the inner flush handle it.
        // Reentrancy is ok afterwards for bindings etc.
        if (flushidx !== 0) {
            return;
        }
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            try {
                while (flushidx < dirty_components.length) {
                    const component = dirty_components[flushidx];
                    flushidx++;
                    set_current_component(component);
                    update(component.$$);
                }
            }
            catch (e) {
                // reset dirty state to not end up in a deadlocked state and then rethrow
                dirty_components.length = 0;
                flushidx = 0;
                throw e;
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    /**
     * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.
     */
    function flush_render_callbacks(fns) {
        const filtered = [];
        const targets = [];
        render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
        targets.forEach((c) => c());
        render_callbacks = filtered;
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
        else if (callback) {
            callback();
        }
    }
    const null_transition = { duration: 0 };
    function create_bidirectional_transition(node, fn, params, intro) {
        const options = { direction: 'both' };
        let config = fn(node, params, options);
        let t = intro ? 0 : 1;
        let running_program = null;
        let pending_program = null;
        let animation_name = null;
        function clear_animation() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function init(program, duration) {
            const d = (program.b - t);
            duration *= Math.abs(d);
            return {
                a: t,
                b: program.b,
                d,
                duration,
                start: program.start,
                end: program.start + duration,
                group: program.group
            };
        }
        function go(b) {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            const program = {
                start: now() + delay,
                b
            };
            if (!b) {
                // @ts-ignore todo: improve typings
                program.group = outros;
                outros.r += 1;
            }
            if (running_program || pending_program) {
                pending_program = program;
            }
            else {
                // if this is an intro, and there's a delay, we need to do
                // an initial tick and/or apply CSS animation immediately
                if (css) {
                    clear_animation();
                    animation_name = create_rule(node, t, b, duration, delay, easing, css);
                }
                if (b)
                    tick(0, 1);
                running_program = init(program, duration);
                add_render_callback(() => dispatch(node, b, 'start'));
                loop(now => {
                    if (pending_program && now > pending_program.start) {
                        running_program = init(pending_program, duration);
                        pending_program = null;
                        dispatch(node, running_program.b, 'start');
                        if (css) {
                            clear_animation();
                            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                        }
                    }
                    if (running_program) {
                        if (now >= running_program.end) {
                            tick(t = running_program.b, 1 - t);
                            dispatch(node, running_program.b, 'end');
                            if (!pending_program) {
                                // we're done
                                if (running_program.b) {
                                    // intro — we can tidy up immediately
                                    clear_animation();
                                }
                                else {
                                    // outro — needs to be coordinated
                                    if (!--running_program.group.r)
                                        run_all(running_program.group.c);
                                }
                            }
                            running_program = null;
                        }
                        else if (now >= running_program.start) {
                            const p = now - running_program.start;
                            t = running_program.a + running_program.d * easing(p / running_program.duration);
                            tick(t, 1 - t);
                        }
                    }
                    return !!(running_program || pending_program);
                });
            }
        }
        return {
            run(b) {
                if (is_function(config)) {
                    wait().then(() => {
                        // @ts-ignore
                        config = config(options);
                        go(b);
                    });
                }
                else {
                    go(b);
                }
            },
            end() {
                clear_animation();
                running_program = pending_program = null;
            }
        };
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
                // if the component was destroyed immediately
                // it will update the `$$.on_destroy` reference to `null`.
                // the destructured on_destroy may still reference to the old array
                if (component.$$.on_destroy) {
                    component.$$.on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            flush_render_callbacks($$.after_update);
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: [],
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            if (!is_function(callback)) {
                return noop;
            }
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
        const o = +getComputedStyle(node).opacity;
        return {
            delay,
            duration,
            easing,
            css: t => `opacity: ${t * o}`
        };
    }

    const tools = {
        /**
         * Convert a string to ArrayBuffer
         * @param {string} str String to convert
         * @returns {ArrayBuffer} Result
         */
        str2ab: function (str) {
            var i, buf = new ArrayBuffer(str.length), bufView = new Uint8Array(buf);
            for (i = 0; i < str.length; i++) {
                bufView[i] = str.charCodeAt(i);
            }
            return buf;
        },

        /**
         * Convert an array to ArrayBuffer
         * @param array
         * @returns {ArrayBuffer} Result
         */
        a2ab: function (array) {
            return new Uint8Array(array).buffer;
        },

        /**
         * Convert ArrayBuffer to string
         * @param {ArrayBuffer} buffer Buffer to convert
         * @returns {string}
         */
        ab2hexstr: function (buffer) {
            var i, str = '', ua = new Uint8Array(buffer);
            for (i = 0; i < ua.length; i++) {
                str += this.b2hexstr(ua[i]);
            }
            return str;
        },

        /**
         * Convert byte to hexstr.
         * @param {number} byte Byte to convert
         */
        b2hexstr: function (byte) {
            return ('00' + byte.toString(16)).substr(-2);
        },

        /**
         * @param {ArrayBuffer} buffer
         * @returns {string}
         */
        ab2str: function (buffer) {
            return String.fromCharCode.apply(null, new Uint8Array(buffer));
        }
    };

    /* src/views/ColorView.svelte generated by Svelte v3.59.2 */

    function create_fragment$3(ctx) {
    	let div4;
    	let div2;
    	let img;
    	let img_src_value;
    	let t0;
    	let div0;
    	let t1;
    	let div1;
    	let t2;
    	let input0;
    	let input0_value_value;
    	let t3;
    	let div3;
    	let button0;
    	let t5;
    	let input1;
    	let input1_value_value;
    	let t6;
    	let button1;
    	let mounted;
    	let dispose;

    	return {
    		c() {
    			div4 = element("div");
    			div2 = element("div");
    			img = element("img");
    			t0 = space();
    			div0 = element("div");
    			t1 = space();
    			div1 = element("div");
    			t2 = space();
    			input0 = element("input");
    			t3 = space();
    			div3 = element("div");
    			button0 = element("button");
    			button0.textContent = "";
    			t5 = space();
    			input1 = element("input");
    			t6 = space();
    			button1 = element("button");
    			button1.textContent = "";
    			attr(img, "id", "colorwheelbg");
    			if (!src_url_equal(img.src, img_src_value = "res/colorwheel.png")) attr(img, "src", img_src_value);
    			attr(img, "alt", "Color Wheel");
    			attr(img, "width", "auto");
    			attr(img, "height", "90%");
    			attr(img, "class", "svelte-1neoqvf");
    			attr(div0, "id", "pointer");
    			attr(div0, "class", "svelte-1neoqvf");
    			attr(div1, "id", "touchrect");
    			attr(div1, "class", "svelte-1neoqvf");
    			attr(div2, "id", "colorpicker");
    			attr(div2, "class", "svelte-1neoqvf");
    			attr(input0, "id", "brightness");
    			attr(input0, "class", "slider svelte-1neoqvf");
    			attr(input0, "type", "range");
    			attr(input0, "min", "0");
    			attr(input0, "max", "100");
    			attr(input0, "step", "2");
    			input0.value = input0_value_value = /*brightness*/ ctx[1] * 100;
    			attr(button0, "class", "icon svelte-1neoqvf");
    			attr(button0, "id", "clear_button");
    			attr(input1, "type", "text");
    			attr(input1, "class", "value svelte-1neoqvf");
    			attr(input1, "autocomplete", "off");
    			attr(input1, "autocorrect", "off");
    			attr(input1, "autocapitalize", "off");
    			attr(input1, "maxlength", "6");
    			input1.value = input1_value_value = tools.b2hexstr(/*rgbColor*/ ctx[7].r) + tools.b2hexstr(/*rgbColor*/ ctx[7].g) + tools.b2hexstr(/*rgbColor*/ ctx[7].b);
    			attr(button1, "class", "icon svelte-1neoqvf");
    			attr(button1, "id", "clearall_button");
    			attr(div3, "id", "buttonctrl");
    			attr(div3, "class", "svelte-1neoqvf");
    			attr(div4, "class", "color-view svelte-1neoqvf");
    		},
    		m(target, anchor) {
    			insert(target, div4, anchor);
    			append(div4, div2);
    			append(div2, img);
    			/*img_binding*/ ctx[13](img);
    			append(div2, t0);
    			append(div2, div0);
    			/*div0_binding*/ ctx[14](div0);
    			append(div2, t1);
    			append(div2, div1);
    			append(div4, t2);
    			append(div4, input0);
    			/*input0_binding*/ ctx[21](input0);
    			append(div4, t3);
    			append(div4, div3);
    			append(div3, button0);
    			append(div3, t5);
    			append(div3, input1);
    			/*input1_binding*/ ctx[23](input1);
    			append(div3, t6);
    			append(div3, button1);

    			if (!mounted) {
    				dispose = [
    					listen(div1, "mousedown", /*mousedown_handler*/ ctx[15]),
    					listen(div1, "mousemove", /*mousemove_handler*/ ctx[16]),
    					listen(div1, "mouseup", /*mouseup_handler*/ ctx[17]),
    					listen(div1, "touchstart", /*touchstart_handler*/ ctx[18], { passive: true }),
    					listen(div1, "touchmove", /*touchmove_handler*/ ctx[19]),
    					listen(div1, "touchend", /*touchend_handler*/ ctx[20], { passive: true }),
    					listen(input0, "input", /*handleBrightnessChange*/ ctx[11]),
    					listen(button0, "click", /*click_handler*/ ctx[22]),
    					listen(input1, "input", /*handleInputChange*/ ctx[12]),
    					listen(input1, "keydown", handleKeydown),
    					listen(button1, "click", /*click_handler_1*/ ctx[24])
    				];

    				mounted = true;
    			}
    		},
    		p(ctx, [dirty]) {
    			if (dirty & /*brightness*/ 2 && input0_value_value !== (input0_value_value = /*brightness*/ ctx[1] * 100)) {
    				input0.value = input0_value_value;
    			}

    			if (dirty & /*rgbColor*/ 128 && input1_value_value !== (input1_value_value = tools.b2hexstr(/*rgbColor*/ ctx[7].r) + tools.b2hexstr(/*rgbColor*/ ctx[7].g) + tools.b2hexstr(/*rgbColor*/ ctx[7].b)) && input1.value !== input1_value_value) {
    				input1.value = input1_value_value;
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(div4);
    			/*img_binding*/ ctx[13](null);
    			/*div0_binding*/ ctx[14](null);
    			/*input0_binding*/ ctx[21](null);
    			/*input1_binding*/ ctx[23](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    function handleKeydown(event) {
    	const validKeys = [8, 9, 16, 37, 38, 39, 40, 46];

    	if (!validKeys.includes(event.keyCode)) {
    		if (event.target.value.length >= 6 && event.target.selectionEnd - event.target.selectionStart === 0) {
    			event.preventDefault();
    		} else if (event.keyCode < 48 || event.keyCode > 71) {
    			event.preventDefault();
    		}
    	}
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let rgbColor;
    	const dispatch = createEventDispatcher();
    	let pointer;
    	let colorpicker;
    	let cpradius = 0;
    	let cpcenter = 0;
    	let drag = false;
    	let color = tinycolor({ h: 0, s: 0, v: 1 });
    	let brightness = 1.0;
    	let inputbox;
    	let slider;

    	function handleResize() {
    		if (!colorpicker) return;
    		const w = colorpicker.parentNode.clientWidth;
    		const h = colorpicker.parentNode.clientHeight;
    		const attrW = colorpicker.getAttribute('width');
    		const attrH = colorpicker.getAttribute('height');
    		const side = attrW === 'auto' ? attrH : attrW;

    		if (w > h) {
    			if (attrH !== side) {
    				colorpicker.setAttribute('height', side);
    				colorpicker.setAttribute('width', 'auto');
    			}
    		} else if (attrW !== side) {
    			colorpicker.setAttribute('height', 'auto');
    			colorpicker.setAttribute('width', side);
    		}

    		cpradius = colorpicker.offsetWidth / 2;
    		cpcenter = colorpicker.offsetLeft + cpradius;
    		updatePointer();
    	}

    	function getCirclePoint(x, y) {
    		const p = { x, y };

    		const c = {
    			x: cpcenter,
    			y: colorpicker.offsetTop + cpradius
    		};

    		const n = Math.sqrt(Math.pow(x - c.x, 2) + Math.pow(y - c.y, 2));

    		if (n > cpradius) {
    			p.x = c.x + cpradius * ((x - c.x) / n);
    			p.y = c.y + cpradius * ((y - c.y) / n);
    		}

    		return p;
    	}

    	function getColorFromPoint(p) {
    		const x = p.x - colorpicker.offsetLeft - cpradius;
    		const y = cpradius - p.y + colorpicker.offsetTop;
    		const t = Math.atan2(y, x);
    		const h = (t * (180 / Math.PI) + 360) % 360;
    		const s = Math.min(Math.sqrt(x * x + y * y) / cpradius, 1);
    		return tinycolor({ h, s, v: 1 });
    	}

    	function getPointFromColor(color) {
    		const t = color.toHsv().h * (Math.PI / 180);
    		const s = color.toHsv().s;
    		const y = Math.sin(t) * cpradius * s;
    		const x = Math.cos(t) * cpradius * s;

    		return {
    			x: Math.round(x + colorpicker.offsetLeft + cpradius),
    			y: Math.round(cpradius - y + colorpicker.offsetTop)
    		};
    	}

    	function updatePointer() {
    		if (!pointer || !color) return;
    		const point = getPointFromColor(color);
    		$$invalidate(2, pointer.style.left = point.x - pointer.offsetWidth / 2 + 'px', pointer);
    		$$invalidate(2, pointer.style.top = point.y - pointer.offsetHeight / 2 + 'px', pointer);
    		$$invalidate(2, pointer.style.backgroundColor = color.toHexString(), pointer);
    	}

    	function handleColorPickerEvent(event) {
    		const { clientX, clientY } = event.touches?.[0] ?? event;
    		const point = getCirclePoint(clientX, clientY);
    		$$invalidate(0, color = getColorFromPoint(point));
    		updatePointer();
    		dispatch('change', rgbColor);
    	}

    	function handleBrightnessChange(event) {
    		$$invalidate(1, brightness = event.target.value / 100);
    		dispatch('change', rgbColor);
    	}

    	function handleInputChange(event) {
    		const inputValue = event.target.value;
    		if (inputValue.length !== 6) return;
    		const rgb = tinycolor(inputValue).toRgb();

    		if (rgb.r === 0 && rgb.g === 0 && rgb.b === 0) {
    			$$invalidate(1, brightness = 0);
    			$$invalidate(0, color = tinycolor({ r: 0xff, g: 0xff, b: 0xff }));
    		} else {
    			const bright = Math.max(rgb.r, rgb.g, rgb.b) / 256;
    			rgb.r = Math.round(rgb.r / bright);
    			rgb.g = Math.round(rgb.g / bright);
    			rgb.b = Math.round(rgb.b / bright);
    			$$invalidate(1, brightness = bright);
    			$$invalidate(0, color = tinycolor(rgb));
    		}

    		updatePointer();
    		dispatch('change', rgbColor);
    	}

    	onMount(() => {
    		setTimeout(
    			() => {
    				handleResize();
    				window.addEventListener('resize', handleResize);
    			},
    			100
    		);

    		return () => window.removeEventListener('resize', handleResize);
    	});

    	function img_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			colorpicker = $$value;
    			$$invalidate(3, colorpicker);
    		});
    	}

    	function div0_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			pointer = $$value;
    			$$invalidate(2, pointer);
    		});
    	}

    	const mousedown_handler = () => $$invalidate(4, drag = true);
    	const mousemove_handler = e => drag && handleColorPickerEvent(e);
    	const mouseup_handler = () => $$invalidate(4, drag = false);
    	const touchstart_handler = () => $$invalidate(4, drag = true);
    	const touchmove_handler = e => drag && handleColorPickerEvent(e);
    	const touchend_handler = () => $$invalidate(4, drag = false);

    	function input0_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			slider = $$value;
    			$$invalidate(6, slider);
    		});
    	}

    	const click_handler = () => dispatch('clear');

    	function input1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			inputbox = $$value;
    			$$invalidate(5, inputbox);
    		});
    	}

    	const click_handler_1 = () => {
    		$$invalidate(0, color = tinycolor({ h: 0, s: 0, v: 1 }));
    		updatePointer();
    		$$invalidate(1, brightness = 0.0);
    		dispatch('clearall');
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*color, brightness*/ 3) {
    			$$invalidate(7, rgbColor = {
    				r: Math.round(color.toRgb().r * brightness),
    				g: Math.round(color.toRgb().g * brightness),
    				b: Math.round(color.toRgb().b * brightness)
    			});
    		}
    	};

    	return [
    		color,
    		brightness,
    		pointer,
    		colorpicker,
    		drag,
    		inputbox,
    		slider,
    		rgbColor,
    		dispatch,
    		updatePointer,
    		handleColorPickerEvent,
    		handleBrightnessChange,
    		handleInputChange,
    		img_binding,
    		div0_binding,
    		mousedown_handler,
    		mousemove_handler,
    		mouseup_handler,
    		touchstart_handler,
    		touchmove_handler,
    		touchend_handler,
    		input0_binding,
    		click_handler,
    		input1_binding,
    		click_handler_1
    	];
    }

    class ColorView extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});
    	}
    }

    /* src/views/EffectsView.svelte generated by Svelte v3.59.2 */

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	return child_ctx;
    }

    // (21:4) {:else}
    function create_else_block$1(ctx) {
    	let div;
    	let each_value = /*effects*/ ctx[0];
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	return {
    		c() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr(div, "class", "effects-list");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div, null);
    				}
    			}
    		},
    		p(ctx, dirty) {
    			if (dirty & /*dispatch, effects*/ 3) {
    				each_value = /*effects*/ ctx[0];
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};
    }

    // (16:4) {#if effects.length === 0}
    function create_if_block$2(ctx) {
    	let div;

    	return {
    		c() {
    			div = element("div");

    			div.innerHTML = `<p>No effects available.</p> 
            <p>Connect to a server to see available effects.</p>`;

    			attr(div, "class", "no-effects svelte-1dh4p6b");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (23:12) {#each effects as effect}
    function create_each_block$1(ctx) {
    	let article;
    	let t0_value = /*effect*/ ctx[3].name + "";
    	let t0;
    	let t1;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[2](/*effect*/ ctx[3]);
    	}

    	return {
    		c() {
    			article = element("article");
    			t0 = text(t0_value);
    			t1 = space();
    			attr(article, "class", "svelte-1dh4p6b");
    		},
    		m(target, anchor) {
    			insert(target, article, anchor);
    			append(article, t0);
    			append(article, t1);

    			if (!mounted) {
    				dispose = listen(article, "click", click_handler);
    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*effects*/ 1 && t0_value !== (t0_value = /*effect*/ ctx[3].name + "")) set_data(t0, t0_value);
    		},
    		d(detaching) {
    			if (detaching) detach(article);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    function create_fragment$2(ctx) {
    	let div;
    	let h2;
    	let t1;

    	function select_block_type(ctx, dirty) {
    		if (/*effects*/ ctx[0].length === 0) return create_if_block$2;
    		return create_else_block$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	return {
    		c() {
    			div = element("div");
    			h2 = element("h2");
    			h2.textContent = "Effects";
    			t1 = space();
    			if_block.c();
    			attr(h2, "class", "svelte-1dh4p6b");
    			attr(div, "class", "effects-view svelte-1dh4p6b");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, h2);
    			append(div, t1);
    			if_block.m(div, null);
    		},
    		p(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div, null);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    			if_block.d();
    		}
    	};
    }

    function instance$2($$self, $$props, $$invalidate) {
    	const dispatch = createEventDispatcher();
    	let { effects = [] } = $$props;
    	const click_handler = effect => dispatch('select', effect);

    	$$self.$$set = $$props => {
    		if ('effects' in $$props) $$invalidate(0, effects = $$props.effects);
    	};

    	return [effects, dispatch, click_handler];
    }

    class EffectsView extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, { effects: 0 });
    	}
    }

    /**
     * @class Server
     * @classdesc Server model representing a Hyperion server connection
     */
    class Server {
        /**
         * Creates a new Server instance
         * @param {string} address - Server address
         * @param {number} port - Server port
         * @param {string} [name=''] - Server name
         * @param {boolean} [selected=false] - Whether this server is selected
         * @param {boolean} [forceWs=false] - Whether to force unencrypted WebSocket connection
         */
        constructor(address = '', port = 8090, name = '', selected = false, forceWs = false) {
            this.address = address;
            this.port = port;
            this.name = name;
            this.selected = selected;
            this.forceWs = forceWs;
        }

        /**
         * Validates whether the server has valid connection details
         * @returns {boolean} Whether the server has valid connection details
         */
        isValid() {
            return this.address && this.address.length > 0 && 
                   this.port && this.port > 0;
        }

        /**
         * Get the display name for the server
         * @returns {string} The server's name or address if name is not set
         */
        getDisplayName() {
            if (this.name && this.name.length > 0) {
                return this.name;
            }
            return this.address;
        }

        /**
         * Creates a server object from a plain object
         * @param {object} obj - Plain object with server properties
         * @returns {Server} A new Server instance
         */
        static fromObject(obj) {
            return new Server(
                obj.address,
                obj.port,
                obj.name,
                obj.selected,
                obj.forceWs
            );
        }
    }

    /* src/views/SettingsView.svelte generated by Svelte v3.59.2 */

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[18] = list[i];
    	child_ctx[20] = i;
    	return child_ctx;
    }

    // (137:4) {:else}
    function create_else_block(ctx) {
    	let div0;
    	let t0;
    	let div1;
    	let button;
    	let mounted;
    	let dispose;

    	function select_block_type_1(ctx, dirty) {
    		if (/*servers*/ ctx[0].length === 0) return create_if_block_1$1;
    		return create_else_block_1;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	return {
    		c() {
    			div0 = element("div");
    			if_block.c();
    			t0 = space();
    			div1 = element("div");
    			button = element("button");
    			button.textContent = "Add Server";
    			attr(div0, "class", "server-list svelte-116wup1");
    			attr(div1, "class", "settings-actions svelte-116wup1");
    		},
    		m(target, anchor) {
    			insert(target, div0, anchor);
    			if_block.m(div0, null);
    			insert(target, t0, anchor);
    			insert(target, div1, anchor);
    			append(div1, button);

    			if (!mounted) {
    				dispose = listen(button, "click", /*startAddServer*/ ctx[5]);
    				mounted = true;
    			}
    		},
    		p(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div0, null);
    				}
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(div0);
    			if_block.d();
    			if (detaching) detach(t0);
    			if (detaching) detach(div1);
    			mounted = false;
    			dispose();
    		}
    	};
    }

    // (88:4) {#if isAdding || isEditing}
    function create_if_block$1(ctx) {
    	let div5;
    	let h5;
    	let t0_value = (/*isAdding*/ ctx[1] ? 'Add Server' : 'Edit Server') + "";
    	let t0;
    	let t1;
    	let div0;
    	let label0;
    	let t3;
    	let input0;
    	let t4;
    	let div1;
    	let label1;
    	let t6;
    	let input1;
    	let t7;
    	let div2;
    	let label2;
    	let t9;
    	let input2;
    	let t10;
    	let div3;
    	let label3;
    	let input3;
    	let t11;
    	let t12;
    	let div4;
    	let button0;
    	let t14;
    	let button1;
    	let mounted;
    	let dispose;

    	return {
    		c() {
    			div5 = element("div");
    			h5 = element("h5");
    			t0 = text(t0_value);
    			t1 = space();
    			div0 = element("div");
    			label0 = element("label");
    			label0.textContent = "Server Name";
    			t3 = space();
    			input0 = element("input");
    			t4 = space();
    			div1 = element("div");
    			label1 = element("label");
    			label1.textContent = "IP Address *";
    			t6 = space();
    			input1 = element("input");
    			t7 = space();
    			div2 = element("div");
    			label2 = element("label");
    			label2.textContent = "Port *";
    			t9 = space();
    			input2 = element("input");
    			t10 = space();
    			div3 = element("div");
    			label3 = element("label");
    			input3 = element("input");
    			t11 = text("\n                    Force unencrypted connection");
    			t12 = space();
    			div4 = element("div");
    			button0 = element("button");
    			button0.textContent = "Cancel";
    			t14 = space();
    			button1 = element("button");
    			button1.textContent = "Save";
    			attr(label0, "for", "server-name");
    			attr(label0, "class", "svelte-116wup1");
    			attr(input0, "id", "server-name");
    			attr(input0, "type", "text");
    			attr(div0, "class", "form-group");
    			attr(label1, "for", "server-address");
    			attr(label1, "class", "svelte-116wup1");
    			attr(input1, "id", "server-address");
    			attr(input1, "type", "text");
    			attr(input1, "placeholder", "");
    			attr(div1, "class", "form-group");
    			attr(label2, "for", "server-port");
    			attr(label2, "class", "svelte-116wup1");
    			attr(input2, "id", "server-port");
    			attr(input2, "type", "number");
    			attr(input2, "placeholder", "8090");
    			attr(div2, "class", "form-group");
    			attr(input3, "type", "checkbox");
    			attr(input3, "name", "forceWs");
    			attr(label3, "class", "svelte-116wup1");
    			attr(div3, "class", "form-group");
    			attr(button0, "class", "secondary");
    			attr(div4, "class", "form-actions svelte-116wup1");
    			attr(div5, "class", "edit-form svelte-116wup1");
    		},
    		m(target, anchor) {
    			insert(target, div5, anchor);
    			append(div5, h5);
    			append(h5, t0);
    			append(div5, t1);
    			append(div5, div0);
    			append(div0, label0);
    			append(div0, t3);
    			append(div0, input0);
    			set_input_value(input0, /*editServer*/ ctx[3].name);
    			append(div5, t4);
    			append(div5, div1);
    			append(div1, label1);
    			append(div1, t6);
    			append(div1, input1);
    			set_input_value(input1, /*editServer*/ ctx[3].address);
    			append(div5, t7);
    			append(div5, div2);
    			append(div2, label2);
    			append(div2, t9);
    			append(div2, input2);
    			set_input_value(input2, /*editServer*/ ctx[3].port);
    			append(div5, t10);
    			append(div5, div3);
    			append(div3, label3);
    			append(label3, input3);
    			input3.checked = /*editServer*/ ctx[3].forceWs;
    			append(label3, t11);
    			append(div5, t12);
    			append(div5, div4);
    			append(div4, button0);
    			append(div4, t14);
    			append(div4, button1);

    			if (!mounted) {
    				dispose = [
    					listen(input0, "input", /*input0_input_handler*/ ctx[10]),
    					listen(input1, "input", /*input1_input_handler*/ ctx[11]),
    					listen(input2, "input", /*input2_input_handler*/ ctx[12]),
    					listen(input3, "change", /*input3_change_handler*/ ctx[13]),
    					listen(button0, "click", /*cancelEdit*/ ctx[7]),
    					listen(button1, "click", /*submitServer*/ ctx[8])
    				];

    				mounted = true;
    			}
    		},
    		p(ctx, dirty) {
    			if (dirty & /*isAdding*/ 2 && t0_value !== (t0_value = (/*isAdding*/ ctx[1] ? 'Add Server' : 'Edit Server') + "")) set_data(t0, t0_value);

    			if (dirty & /*editServer*/ 8 && input0.value !== /*editServer*/ ctx[3].name) {
    				set_input_value(input0, /*editServer*/ ctx[3].name);
    			}

    			if (dirty & /*editServer*/ 8 && input1.value !== /*editServer*/ ctx[3].address) {
    				set_input_value(input1, /*editServer*/ ctx[3].address);
    			}

    			if (dirty & /*editServer*/ 8 && to_number(input2.value) !== /*editServer*/ ctx[3].port) {
    				set_input_value(input2, /*editServer*/ ctx[3].port);
    			}

    			if (dirty & /*editServer*/ 8) {
    				input3.checked = /*editServer*/ ctx[3].forceWs;
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(div5);
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    // (144:12) {:else}
    function create_else_block_1(ctx) {
    	let each_1_anchor;
    	let each_value = /*servers*/ ctx[0];
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	return {
    		c() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(target, anchor);
    				}
    			}

    			insert(target, each_1_anchor, anchor);
    		},
    		p(ctx, dirty) {
    			if (dirty & /*servers, dispatch, removeServer, startEditServer*/ 593) {
    				each_value = /*servers*/ ctx[0];
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach(each_1_anchor);
    		}
    	};
    }

    // (139:12) {#if servers.length === 0}
    function create_if_block_1$1(ctx) {
    	let div;

    	return {
    		c() {
    			div = element("div");

    			div.innerHTML = `<p>No servers configured.</p> 
                    <p>Add a server to get started.</p>`;

    			attr(div, "class", "no-servers svelte-116wup1");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    		},
    		p: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    		}
    	};
    }

    // (145:16) {#each servers as server, index}
    function create_each_block(ctx) {
    	let div4;
    	let div2;
    	let div0;
    	let t0_value = (/*server*/ ctx[18].name || 'Unnamed Server') + "";
    	let t0;
    	let t1;
    	let div1;
    	let t2_value = /*server*/ ctx[18].address + "";
    	let t2;
    	let t3;
    	let t4_value = /*server*/ ctx[18].port + "";
    	let t4;
    	let t5;
    	let div3;
    	let button0;
    	let t6;
    	let button0_class_value;
    	let t7;
    	let button1;
    	let t8;
    	let button1_class_value;
    	let t9;
    	let div4_class_value;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[14](/*index*/ ctx[20]);
    	}

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[15](/*index*/ ctx[20]);
    	}

    	function click_handler_2() {
    		return /*click_handler_2*/ ctx[16](/*index*/ ctx[20]);
    	}

    	return {
    		c() {
    			div4 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			t0 = text(t0_value);
    			t1 = space();
    			div1 = element("div");
    			t2 = text(t2_value);
    			t3 = text(":");
    			t4 = text(t4_value);
    			t5 = space();
    			div3 = element("div");
    			button0 = element("button");
    			t6 = text("✏️");
    			t7 = space();
    			button1 = element("button");
    			t8 = text("🗑️");
    			t9 = space();
    			attr(div0, "class", "server-name");
    			attr(div1, "class", "server-address");
    			attr(div2, "class", "server-info");
    			attr(button0, "class", button0_class_value = "icon-button edit " + (!/*server*/ ctx[18].selected ? 'secondary' : ''));
    			attr(button0, "title", "Edit server");
    			attr(button1, "class", button1_class_value = "icon-button delete " + (!/*server*/ ctx[18].selected ? 'secondary' : ''));
    			attr(button1, "title", "Remove server");
    			attr(div3, "class", "server-actions");
    			attr(div4, "class", div4_class_value = "server-item " + (/*server*/ ctx[18].selected ? 'selected' : '') + " svelte-116wup1");
    		},
    		m(target, anchor) {
    			insert(target, div4, anchor);
    			append(div4, div2);
    			append(div2, div0);
    			append(div0, t0);
    			append(div2, t1);
    			append(div2, div1);
    			append(div1, t2);
    			append(div1, t3);
    			append(div1, t4);
    			append(div4, t5);
    			append(div4, div3);
    			append(div3, button0);
    			append(button0, t6);
    			append(div3, t7);
    			append(div3, button1);
    			append(button1, t8);
    			append(div4, t9);

    			if (!mounted) {
    				dispose = [
    					listen(button0, "click", stop_propagation(click_handler)),
    					listen(button1, "click", stop_propagation(click_handler_1)),
    					listen(div4, "click", click_handler_2)
    				];

    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*servers*/ 1 && t0_value !== (t0_value = (/*server*/ ctx[18].name || 'Unnamed Server') + "")) set_data(t0, t0_value);
    			if (dirty & /*servers*/ 1 && t2_value !== (t2_value = /*server*/ ctx[18].address + "")) set_data(t2, t2_value);
    			if (dirty & /*servers*/ 1 && t4_value !== (t4_value = /*server*/ ctx[18].port + "")) set_data(t4, t4_value);

    			if (dirty & /*servers*/ 1 && button0_class_value !== (button0_class_value = "icon-button edit " + (!/*server*/ ctx[18].selected ? 'secondary' : ''))) {
    				attr(button0, "class", button0_class_value);
    			}

    			if (dirty & /*servers*/ 1 && button1_class_value !== (button1_class_value = "icon-button delete " + (!/*server*/ ctx[18].selected ? 'secondary' : ''))) {
    				attr(button1, "class", button1_class_value);
    			}

    			if (dirty & /*servers*/ 1 && div4_class_value !== (div4_class_value = "server-item " + (/*server*/ ctx[18].selected ? 'selected' : '') + " svelte-116wup1")) {
    				attr(div4, "class", div4_class_value);
    			}
    		},
    		d(detaching) {
    			if (detaching) detach(div4);
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    function create_fragment$1(ctx) {
    	let div;
    	let h2;
    	let t1;

    	function select_block_type(ctx, dirty) {
    		if (/*isAdding*/ ctx[1] || /*isEditing*/ ctx[2]) return create_if_block$1;
    		return create_else_block;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	return {
    		c() {
    			div = element("div");
    			h2 = element("h2");
    			h2.textContent = "Settings";
    			t1 = space();
    			if_block.c();
    			attr(h2, "class", "svelte-116wup1");
    			attr(div, "class", "settings-view svelte-116wup1");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, h2);
    			append(div, t1);
    			if_block.m(div, null);
    		},
    		p(ctx, [dirty]) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div, null);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(div);
    			if_block.d();
    		}
    	};
    }

    function instance$1($$self, $$props, $$invalidate) {
    	const dispatch = createEventDispatcher();
    	let { servers = [] } = $$props;
    	let isAdding = false;
    	let isEditing = false;
    	let editServer;
    	let editIndex = -1;

    	function startAddServer() {
    		$$invalidate(3, editServer = new Server());
    		$$invalidate(1, isAdding = true);
    		$$invalidate(2, isEditing = false);
    	}

    	function startEditServer(index) {
    		const server = servers[index];
    		if (!server) return;

    		$$invalidate(3, editServer = {
    			address: server.address,
    			port: server.port,
    			name: server.name,
    			selected: server.selected,
    			forceWs: server.forceWs
    		});

    		editIndex = index;
    		$$invalidate(2, isEditing = true);
    		$$invalidate(1, isAdding = false);
    	}

    	function cancelEdit() {
    		$$invalidate(1, isAdding = false);
    		$$invalidate(2, isEditing = false);
    	}

    	function submitServer() {
    		if (!editServer.address || !editServer.port) {
    			return;
    		}

    		if (isAdding) {
    			const newServer = new Server(editServer.address, editServer.port, editServer.name, false, editServer.forceWs);
    			dispatch('add', newServer);
    		} else if (isEditing) {
    			const updatedServer = new Server(editServer.address, editServer.port, editServer.name, servers[editIndex]?.selected || false, editServer.forceWs);
    			dispatch('change', { index: editIndex, server: updatedServer });
    		}

    		$$invalidate(1, isAdding = false);
    		$$invalidate(2, isEditing = false);
    	}

    	function removeServer(index) {
    		if (isAdding || isEditing) return;
    		dispatch('remove', index);
    	}

    	function input0_input_handler() {
    		editServer.name = this.value;
    		$$invalidate(3, editServer);
    	}

    	function input1_input_handler() {
    		editServer.address = this.value;
    		$$invalidate(3, editServer);
    	}

    	function input2_input_handler() {
    		editServer.port = to_number(this.value);
    		$$invalidate(3, editServer);
    	}

    	function input3_change_handler() {
    		editServer.forceWs = this.checked;
    		$$invalidate(3, editServer);
    	}

    	const click_handler = index => startEditServer(index);
    	const click_handler_1 = index => removeServer(index);
    	const click_handler_2 = index => dispatch('select', index);

    	$$self.$$set = $$props => {
    		if ('servers' in $$props) $$invalidate(0, servers = $$props.servers);
    	};

    	return [
    		servers,
    		isAdding,
    		isEditing,
    		editServer,
    		dispatch,
    		startAddServer,
    		startEditServer,
    		cancelEdit,
    		submitServer,
    		removeServer,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler,
    		input3_change_handler,
    		click_handler,
    		click_handler_1,
    		click_handler_2
    	];
    }

    class SettingsView extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, { servers: 0 });
    	}
    }

    class Storage {
        static saveServers(servers) {
            localStorage.setItem('servers', JSON.stringify(servers));
        }

        static loadServers() {
            const serversData = localStorage.getItem('servers');
            if (serversData) {
                try {
                    const parsedServers = JSON.parse(serversData);
                    // Convert plain objects to Server instances
                    return parsedServers.map(serverObj => Server.fromObject(serverObj));
                } catch (error) {
                    console.error('Error parsing servers from storage:', error);
                    return [];
                }
            }
            return [];
        }
    }

    /**
     * WebSocket implementation for Hyperion communication
     */
    class PWebSocket {
        /**
         * Create a new WebSocket instance
         * @param {boolean} debug - Enable debug logging
         */
        constructor(debug = false) {
            this.DEBUG = debug;
            this.handle = null;
            this.currentResponseCallback = null;
            this.currentErrorCallback = null;
            this.inputBuffer = new Uint8Array(4096);
            this.inputBufferIndex = 0;
            this.readBufferTimerId = null;
        }


        /**
         * Check if socket is connected
         * @returns {boolean} Resolves with connection status
         */
        isConnected() {
            if (this.DEBUG) {
                console.log('[DEBUG] Checking if socket is connected...');
            }

            if (!this.handle) {
                if (this.DEBUG) {
                    console.log('[DEBUG] Socket not created');
                }
                return false;
            }

            return this.handle.readyState === WebSocket.OPEN;
        }

        /**
         * Connect to a server
         * @param {../models/Server} server - Server configuration
         * @returns {Promise<void>} Resolves when connected
         */
        connect(server) {
            const protocol = server.forceWs ? 'ws:' : (window.location.protocol === 'https:' ? 'wss:' : 'ws:');
            const url = `${protocol}//${server.address}:${server.port}/`;

            if (this.DEBUG) {
                console.log(`[DEBUG] Connecting to peer ${url}`);
            }

            return new Promise((resolve, reject) => {
                this.handle = new WebSocket(url);

                this.handle.onmessage = this.onDataReceived.bind(this);

                this.handle.onopen = () => {
                    resolve();
                };

                this.handle.onclose = () => {
                    if (this.DEBUG) {
                        console.log('onClose');
                    }
                };

                this.handle.onerror = () => {
                    if (this.DEBUG) {
                        console.log('[ERROR]: ');
                    }
                    reject(new Error('WebSocket error'));
                };
            });
        }

        /**
         * Close the socket connection
         * @returns {void} Resolves when closed
         */
        close() {
            if (this.DEBUG) {
                console.log('[DEBUG] Closing socket...');
            }

            if (this.handle) {
                this.handle.close();
                return;
            }

            if (this.DEBUG) {
                console.log('[DEBUG] Socket not created');
            }
        }

        /**
         * Write data to the socket
         * @param {string|Array} data - Data to send
         * @returns {Promise<void>} Resolves when data is sent
         */
        write(data) {
            if (this.DEBUG) {
                console.log('[DEBUG] writing to socket...');
            }

            if (!this.handle) {
                if (this.DEBUG) {
                    console.log('[DEBUG] Socket not created');
                }
                return Promise.reject(new Error('Socket handle is invalid'));
            }

            if (!this.isConnected()) {
                return Promise.reject(new Error('No connection to peer'));
            }


            let dataToSend;
            const dataType = typeof data;

            if (dataType === 'string') {
                if (this.DEBUG) {
                    console.log('> ' + data);
                }
                dataToSend = data;
            } else {
                if (this.DEBUG) {
                    console.log('> ' + tools.ab2str(data));
                }
                dataToSend = data;
            }

            return new Promise(resolve => {
                this.handle.send(dataToSend);
                resolve();
            });
        }

        /**
         * Read data from the socket
         * @returns {Promise<Array>} Resolves with received data
         */
        read() {
            if (this.DEBUG) {
                console.log('[DEBUG] reading from socket...');
            }

            if (!this.handle) {
                if (this.DEBUG) {
                    console.log('[DEBUG] socket not created');
                }
                return Promise.reject(new Error('Socket handle is invalid'));
            }

            if (!this.isConnected()) {
                return Promise.reject(new Error('No connection to peer'));
            }

            return new Promise((resolve, reject) => {
                this.currentResponseCallback = (data) => {
                    this.currentResponseCallback = null;
                    resolve(data);
                };
                this.currentErrorCallback = (error) => {
                    this.currentErrorCallback = null;
                    reject(new Error(error));
                };
            });
        }

        /**
         * Handle incoming data
         * @private
         * @param {MessageEvent} event - WebSocket message event
         */
        onDataReceived(event) {
            if (this.DEBUG) {
                console.log('[DEBUG] received data...');
            }

            if (this.handle && event.data) {
                if (this.DEBUG) {
                    console.log('< ' + event.data);
                }

                if (this.currentResponseCallback) {
                    this.currentResponseCallback(tools.str2ab(event.data));
                }
            }
        }
    }

    /**
     * Interface for the hyperion server control
     * Commands are sent directly to hyperion's server
     */
    class HyperionAPI {
        /**
         * Create a new HyperionAPI instance
         * @param {../models/Server} server - Hyperion server parameter
         */
        constructor(server) {
            this.server = server;
            this.socket = new PWebSocket();
            this.connecting = false;
        }

        /**
         * Try to connect to the server
         * @returns {Promise<void>} Resolves when connected
         */
        connect() {
            if (!this.server) {
                return Promise.reject(new Error('Missing server info'));
            }

            if (this.connecting) {
                return Promise.reject(new Error('Already connecting'));
            }

            this.connecting = true;

            return new Promise((resolve, reject) => {
                this.socket.connect(this.server)
                    .then(() => {
                        this.connecting = false;
                        resolve();
                    })
                    .catch((error) => {
                        this.socket.close();
                        this.connecting = false;
                        reject(new Error(error));
                    });
            });
        }

        /**
         * Disconnect from the server
         */
        disconnect() {
            this.socket.close();
        }

        /**
         * Sends the color command to the server
         * @param {object} color - Color to set
         * @param {number} color.r - Red value
         * @param {number} color.g - Green value
         * @param {number} color.b - Blue value
         * @param {number} duration - Duration in seconds
         * @returns {Promise<object>} Resolves with the command sent
         */
        setColor(color, duration) {
            const intColor = [
                Math.floor(color.r),
                Math.floor(color.g),
                Math.floor(color.b)
            ];

            const cmd = {
                command: 'color',
                color: intColor,
                priority: this.server.priority
            };

            if (duration) {
                cmd.duration = duration * 1000;
            }

            return this.sendCommand(cmd);
        }

        /**
         * Clear colors for the current priority
         * @returns {Promise<object>} Resolves with the command sent
         */
        clear() {
            const cmd = {
                command: 'clear',
                priority: this.server.priority
            };
            return this.sendCommand(cmd);
        }

        /**
         * Clear all priorities
         * @returns {Promise<object>} Resolves with the command sent
         */
        clearall() {
            const cmd = {
                command: 'clearall'
            };
            return this.sendCommand(cmd);
        }

        /**
         * Sends a command to run specified effect
         * @param {object} effect - Effect object
         * @param {string} effect.name - Effect name
         * @param {object} effect.args - Effect arguments
         * @returns {Promise<object>} Resolves with the command sent
         */
        runEffect(effect) {
            if (!effect) {
                return Promise.reject(new Error('No effect specified'));
            }

            const cmd = {
                command: 'effect',
                effect: {
                    name: effect.name,
                    args: effect.args
                },
                priority: this.server.priority
            };
            return this.sendCommand(cmd);
        }

        /**
         * Sends a command for color transformation
         * @param {../models/Transform} transform - Transform parameters
         * @returns {Promise<object>} Resolves with the command sent
         */
        setTransform(transform) {
            if (!transform) {
                return Promise.reject(new Error('No transform specified'));
            }

            const cmd = {
                command: 'transform',
                transform: transform
            };

            return this.sendCommand(cmd);
        }

        /**
         * Sends a command to the server
         * @private
         * @param {object|string} command - Command to send
         * @returns {Promise<object>} Resolves with the command sent
         */
        sendCommand(command) {
            if (!command) {
                return Promise.reject(new Error('No command specified'));
            }

            const data = typeof command === 'string'
                ? command
                : JSON.stringify(command);

            return this.socket.write(data + '\n')
        }

        /**
         * Get the information about the hyperion server
         * @returns {Promise<object>} Resolves with server info
         */
        getServerInfo() {
            const cmd = { command: 'serverinfo' };

            return new Promise((resolve, reject) => {
                this.socket.write(JSON.stringify(cmd) + '\n')
                    .then(() => this.socket.read())
                    .then(result => {
                        try {
                            const str = tools.ab2str(result);
                            const dataobj = JSON.parse(str);
                            resolve(dataobj.info);
                        } catch (e) {
                            reject(new Error('Failed to parse server info: ' + e.message));
                        }
                    })
                    .catch(reject);
            });
        }

        /**
         * Check if the API is connecting to the server
         * @returns {boolean} True if connecting
         */
        isConnecting() {
            return this.connecting;
        }

        /**
         * Check if connected to the server
         * @returns {boolean} Resolves with connection status
         */
        isConnected() {
            return this.socket.isConnected();
        }
    }

    /* src/App.svelte generated by Svelte v3.59.2 */

    function create_if_block_3(ctx) {
    	let settingsview;
    	let current;
    	settingsview = new SettingsView({ props: { servers: /*servers*/ ctx[0] } });
    	settingsview.$on("add", /*addServer*/ ctx[4]);
    	settingsview.$on("change", /*changeServer*/ ctx[5]);
    	settingsview.$on("remove", /*removeServer*/ ctx[6]);
    	settingsview.$on("select", /*selectServer*/ ctx[7]);

    	return {
    		c() {
    			create_component(settingsview.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(settingsview, target, anchor);
    			current = true;
    		},
    		p(ctx, dirty) {
    			const settingsview_changes = {};
    			if (dirty & /*servers*/ 1) settingsview_changes.servers = /*servers*/ ctx[0];
    			settingsview.$set(settingsview_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(settingsview.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(settingsview.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(settingsview, detaching);
    		}
    	};
    }

    // (164:44) 
    function create_if_block_2(ctx) {
    	let effectsview;
    	let current;
    	effectsview = new EffectsView({ props: { effects: /*effects*/ ctx[2] } });
    	effectsview.$on("select", /*handleEffectSelect*/ ctx[9]);

    	return {
    		c() {
    			create_component(effectsview.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(effectsview, target, anchor);
    			current = true;
    		},
    		p(ctx, dirty) {
    			const effectsview_changes = {};
    			if (dirty & /*effects*/ 4) effectsview_changes.effects = /*effects*/ ctx[2];
    			effectsview.$set(effectsview_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(effectsview.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(effectsview.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(effectsview, detaching);
    		}
    	};
    }

    // (158:8) {#if currentView === 'color'}
    function create_if_block_1(ctx) {
    	let colorview;
    	let current;
    	colorview = new ColorView({});
    	colorview.$on("change", /*handleColorChange*/ ctx[8]);
    	colorview.$on("clear", /*handleClear*/ ctx[10]);
    	colorview.$on("clearall", /*handleClearAll*/ ctx[11]);

    	return {
    		c() {
    			create_component(colorview.$$.fragment);
    		},
    		m(target, anchor) {
    			mount_component(colorview, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i(local) {
    			if (current) return;
    			transition_in(colorview.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(colorview.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			destroy_component(colorview, detaching);
    		}
    	};
    }

    // (176:8) {#if message}
    function create_if_block(ctx) {
    	let div;
    	let t;
    	let div_transition;
    	let current;

    	return {
    		c() {
    			div = element("div");
    			t = text(/*message*/ ctx[3]);
    			attr(div, "id", "message");
    			attr(div, "class", "svelte-120rzj1");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);
    			append(div, t);
    			current = true;
    		},
    		p(ctx, dirty) {
    			if (!current || dirty & /*message*/ 8) set_data(t, /*message*/ ctx[3]);
    		},
    		i(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!current) return;
    				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, { duration: 200 }, true);
    				div_transition.run(1);
    			});

    			current = true;
    		},
    		o(local) {
    			if (!div_transition) div_transition = create_bidirectional_transition(div, fade, { duration: 200 }, false);
    			div_transition.run(0);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);
    			if (detaching && div_transition) div_transition.end();
    		}
    	};
    }

    function create_fragment(ctx) {
    	let div15;
    	let div0;
    	let current_block_type_index;
    	let if_block0;
    	let t0;
    	let t1;
    	let div14;
    	let div13;
    	let div4;
    	let t6;
    	let div8;
    	let t11;
    	let div12;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block_1, create_if_block_2, create_if_block_3];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*currentView*/ ctx[1] === 'color') return 0;
    		if (/*currentView*/ ctx[1] === 'effects') return 1;
    		if (/*currentView*/ ctx[1] === 'settings') return 2;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	let if_block1 = /*message*/ ctx[3] && create_if_block(ctx);

    	return {
    		c() {
    			div15 = element("div");
    			div0 = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			div14 = element("div");
    			div13 = element("div");
    			div4 = element("div");

    			div4.innerHTML = `<div class="icon svelte-120rzj1"></div> 
                <div class="title">Color</div> 
                <div class="touchrect svelte-120rzj1"></div>`;

    			t6 = space();
    			div8 = element("div");

    			div8.innerHTML = `<div class="icon svelte-120rzj1"></div> 
                <div class="title">Effects</div> 
                <div class="touchrect svelte-120rzj1"></div>`;

    			t11 = space();
    			div12 = element("div");

    			div12.innerHTML = `<div class="icon svelte-120rzj1">n</div> 
                <div class="title">Settings</div> 
                <div class="touchrect svelte-120rzj1"></div>`;

    			attr(div0, "id", "main");
    			attr(div0, "class", "svelte-120rzj1");
    			attr(div4, "class", "button svelte-120rzj1");
    			attr(div4, "id", "colorButton");
    			toggle_class(div4, "selected", /*currentView*/ ctx[1] === 'color');
    			attr(div8, "class", "button svelte-120rzj1");
    			attr(div8, "id", "effectsButton");
    			toggle_class(div8, "selected", /*currentView*/ ctx[1] === 'effects');
    			attr(div12, "class", "button svelte-120rzj1");
    			attr(div12, "id", "settingsButton");
    			toggle_class(div12, "selected", /*currentView*/ ctx[1] === 'settings');
    			attr(div13, "class", "button-group svelte-120rzj1");
    			attr(div14, "id", "footer");
    			attr(div14, "class", "svelte-120rzj1");
    			attr(div15, "id", "app");
    			attr(div15, "class", "svelte-120rzj1");
    		},
    		m(target, anchor) {
    			insert(target, div15, anchor);
    			append(div15, div0);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div0, null);
    			}

    			append(div0, t0);
    			if (if_block1) if_block1.m(div0, null);
    			append(div15, t1);
    			append(div15, div14);
    			append(div14, div13);
    			append(div13, div4);
    			append(div13, t6);
    			append(div13, div8);
    			append(div13, t11);
    			append(div13, div12);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen(div4, "click", /*click_handler*/ ctx[14]),
    					listen(div8, "click", /*click_handler_1*/ ctx[15]),
    					listen(div12, "click", /*click_handler_2*/ ctx[16])
    				];

    				mounted = true;
    			}
    		},
    		p(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block0) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block0 = if_blocks[current_block_type_index];

    					if (!if_block0) {
    						if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block0.c();
    					} else {
    						if_block0.p(ctx, dirty);
    					}

    					transition_in(if_block0, 1);
    					if_block0.m(div0, t0);
    				} else {
    					if_block0 = null;
    				}
    			}

    			if (/*message*/ ctx[3]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*message*/ 8) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div0, null);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*currentView*/ 2) {
    				toggle_class(div4, "selected", /*currentView*/ ctx[1] === 'color');
    			}

    			if (!current || dirty & /*currentView*/ 2) {
    				toggle_class(div8, "selected", /*currentView*/ ctx[1] === 'effects');
    			}

    			if (!current || dirty & /*currentView*/ 2) {
    				toggle_class(div12, "selected", /*currentView*/ ctx[1] === 'settings');
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div15);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}

    			if (if_block1) if_block1.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};
    }

    function instance($$self, $$props, $$invalidate) {
    	let api;
    	let currentView = 'color';
    	let servers = [];
    	let effects = [];
    	let selectedServer;
    	let message = '';
    	let messageTimer;

    	onMount(() => {
    		$$invalidate(0, servers = Storage.loadServers());

    		return () => {
    			if (api) {
    				api.disconnect();
    			}

    			if (messageTimer) {
    				clearTimeout(messageTimer);
    			}
    		};
    	});

    	function showMessage(msg) {
    		// Clear any existing timer
    		if (messageTimer) {
    			clearTimeout(messageTimer);
    		}

    		// Set the message
    		$$invalidate(3, message = msg);

    		// Set a timer to clear the message after 2 seconds
    		messageTimer = setTimeout(
    			() => {
    				$$invalidate(3, message = '');
    				messageTimer = null;
    			},
    			2000
    		);
    	}

    	function addServer(event) {
    		const newServer = event.detail;

    		if (servers.length === 0) {
    			newServer.selected = true;
    		}

    		servers.push(newServer);
    		$$invalidate(0, servers);
    		Storage.saveServers(servers);
    	}

    	function changeServer(event) {
    		const updatedServer = event.detail.server;
    		$$invalidate(0, servers[event.detail.index] = updatedServer, servers);
    		Storage.saveServers(servers);
    	}

    	function connect() {
    		if (api) {
    			api.disconnect();
    		}

    		if (selectedServer) {
    			$$invalidate(12, api = new HyperionAPI(selectedServer));
    		} else {
    			showMessage('No server selected');
    			return;
    		}

    		api.connect().then(() => {
    			showMessage('Connected to ' + selectedServer.getDisplayName());
    		}).then(() => {
    			return api.getServerInfo();
    		}).then(info => {
    			$$invalidate(2, effects = info.effects);
    		}).catch(error => {
    			console.error(error);
    			showMessage('Connection failed: ' + error.message);
    		});
    	}

    	function removeServer(event) {
    		const updatedServers = servers.filter((_server, i) => i !== event.detail);
    		$$invalidate(0, servers = updatedServers);
    		Storage.saveServers(servers);
    	}

    	function selectServer(event) {
    		const updatedServers = servers.map((server, i) => {
    			server.selected = i === event.detail;
    			return server;
    		});

    		$$invalidate(0, servers = updatedServers);
    		Storage.saveServers(servers);
    	}

    	function handleColorChange(event) {
    		if (api) {
    			api.setColor(event.detail).catch(error => {
    				console.error(error);
    				showMessage(error.message);
    			});
    		}
    	}

    	function handleEffectSelect(event) {
    		if (api) {
    			api.runEffect(event.detail).catch(error => {
    				showMessage(error.message);
    			});
    		}
    	}

    	function handleClear() {
    		if (api) {
    			api.clear().catch(error => {
    				showMessage(error.message);
    			});
    		}
    	}

    	function handleClearAll() {
    		if (api) {
    			api.clearall().catch(error => {
    				showMessage(error.message);
    			});
    		}
    	}

    	const click_handler = () => $$invalidate(1, currentView = 'color');
    	const click_handler_1 = () => $$invalidate(1, currentView = 'effects');
    	const click_handler_2 = () => $$invalidate(1, currentView = 'settings');

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*servers, selectedServer, api*/ 12289) {
    			{
    				$$invalidate(13, selectedServer = servers.find(server => server.selected));
    				console.log('Selected server: ' + selectedServer?.getDisplayName());

    				if (selectedServer) {
    					connect();
    				} else if (api) {
    					api.disconnect();
    					$$invalidate(12, api = null);
    					$$invalidate(2, effects = []);
    				}
    			}
    		}
    	};

    	return [
    		servers,
    		currentView,
    		effects,
    		message,
    		addServer,
    		changeServer,
    		removeServer,
    		selectServer,
    		handleColorChange,
    		handleEffectSelect,
    		handleClear,
    		handleClearAll,
    		api,
    		selectedServer,
    		click_handler,
    		click_handler_1,
    		click_handler_2
    	];
    }

    class App extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance, create_fragment, safe_not_equal, {});
    	}
    }

    const app = new App({
      target: document.body
    });

    return app;

})(tinycolor);
